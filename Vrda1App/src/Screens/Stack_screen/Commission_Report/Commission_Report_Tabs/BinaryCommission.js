import React, {useEffect, useState} from "react";
import {Text, View, SafeAreaView, TouchableOpacity, FlatList, RefreshControl} from "react-native";
import Colors from "../../../../Style_Sheet/Colors";
import Dialog from "react-native-dialog";
import EvilIcons from "react-native-vector-icons/EvilIcons";
import AntDesign from "react-native-vector-icons/AntDesign";
import DoubleText from "../../../../utilis/DoubleText";
import {getcommissionbinary} from "../../../../utilis/Api/Api_controller";
import Toast from "react-native-simple-toast";
import Loader from "../../../../utilis/Loader";
import Dialogs from "../../../../utilis/Dialog";

const BinaryCommission = () => {
    const [visible, setVisible] = useState(false);
    const [isloading,setLoading]=useState(false);
    const [refreshing,setRefreshing]=useState(false);
    const [apiData,setApiData]=useState("");
    const [res,setRes]=useState("");
    const [receiver,setReceiver]=useState("");
    const [pin,setPin]=useState("");

    useEffect(async ()=>{
        await getData();
    },[]);
    const getData=async ()=>{
        setLoading(true)
        let response = await getcommissionbinary();
        if (response !== "Error") {
            if (response.data.status === true) {
                setApiData(response.data.data);
                setRefreshing(!refreshing)
                setLoading(false);
            }else {
                Toast.show("Something Went Wrong !", Toast.LONG);
                setLoading(false);
            }
        }else {
            Toast.show("Network Error: There is something wrong!", Toast.LONG);
            setLoading(false);
        }
    }
    const onRefresh = async () => {
        await getData();
    }
    const renderItem=({item})=>(
        <TouchableOpacity onPress={()=>{setVisible(true),setRes(item),setReceiver(item.user.name),setPin(item.pin.purchase_pin)}} style={{height:110,width:"46.9%", backgroundColor: Colors.secondary, borderColor: Colors.white, borderRadius: 10, borderBottomWidth: 2, padding: 10,margin:"1.5%" }}>
            <Text style={{ fontSize: 14, color: Colors.white }}>{item.pin_code}</Text>
            <Text style={{ fontSize: 14, color: Colors.white }}>Total ({parseFloat(item.total).toFixed(1)})</Text>
            <Text style={{ fontSize: 14, color: Colors.white }}>Status ({item.status})</Text>
            <Text style={{ fontSize: 13, color: Colors.lightgray, flex: 1, }}>Activity Date: {item.created_at}</Text>
        </TouchableOpacity>
    )
    return (
        <SafeAreaView style={{flex:1}}>
            {apiData?null:
                <Loader animating={isloading}/>}
            <FlatList
                data={apiData}
                renderItem={renderItem}
                numColumns={2}
                style={{ flex: 1 }}
                contentContainerStyle={{ marginVertical: 5 }}
                refreshControl={
                    <RefreshControl
                        refreshing={false}
                        onRefresh={onRefresh} />
                }
            />
            {/*<Dialogs visible={visible} onPress={()=>{setVisible(false)}} title={"Description"}>*/}
            {/*    <Text style={{fontSize:13,paddingHorizontal:10 }}>Pin Code = {res.pin_code}</Text>*/}
            {/*    <Text style={{fontSize:13,paddingHorizontal:10 }}>Pin Package = {pin.package_name}</Text>*/}
            {/*    <Text style={{fontSize:13,paddingHorizontal:10 }}>Pin Package Price = {pin.package_price}</Text>*/}
            {/*    <Text style={{fontSize:13,paddingHorizontal:10 }}>Pin Package BV = {pin.package_business_volume}</Text>*/}
            {/*    /!*<Text style={{fontSize:13,paddingHorizontal:10 }}>Pin Package BV = {pin.package_business_volume}</Text>*!/*/}
            {/*    <Text style={{fontSize:13,paddingHorizontal:10 }}>Generated By = {pin.generated_by}</Text>*/}
            {/*    <View style={{flexDirection:"row",justifyContent:"space-between",marginHorizontal:12,alignItems:"center",marginTop:10}}>*/}
            {/*        <TouchableOpacity style={{backgroundColor: Colors.primary,borderRadius: 25,flexDirection:"row",padding:7,justifyContent:"center",width:70, }}>*/}
            {/*            <EvilIcons color={Colors.white} size={22} name={"user"}/>*/}
            {/*            <Text style={{color:Colors.white,fontSize:12}}>user {res.user_id} </Text>*/}
            {/*        </TouchableOpacity>*/}
            {/*        <AntDesign color={Colors.primary}  size={20} name={"closecircle"} onPress={()=>{setVisible(false)}}/>*/}
            {/*    </View>*/}
            {/*    <DoubleText text1={"Ref.Code"} text2={res.pin_code}/>*/}
            {/*    <DoubleText text1={"Receiver"} text2={receiver}/>*/}
            {/*    <DoubleText text1={"Generator"} text2={res.fromUser?res.fromUser:"Not Available"}/>*/}
            {/*    <DoubleText text1={"Side"} text2={res.side}/>*/}
            {/*    <DoubleText text1={"Type"} text2={res.type}/>*/}
            {/*    <DoubleText text1={"Amount"} text2={res.total}/>*/}
            {/*    <DoubleText text1={"Status"} text2={res.status}/>*/}
            {/*    <DoubleText text1={"Closing"} text2={res.closing_date?res.closing_date:"Not Available"}/>*/}
            {/*    <DoubleText text1={"Date"} text2={res.created_at?res.created_at:"Not Available"}/>*/}
            {/*</Dialogs>*/}
        </SafeAreaView>
    )
}
export default BinaryCommission;
